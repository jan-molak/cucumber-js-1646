{"version":3,"file":"profile_loader.js","sourceRoot":"","sources":["../../src/cli/profile_loader.ts"],"names":[],"mappings":";;;;;AAAA,oDAAsC;AACtC,+CAAsB;AACtB,gDAAuB;AACvB,8DAAoC;AACpC,oDAAkE;AAGlE,MAAqB,aAAa;IAChC,YACmB,SAAiB,EACjB,QAA2B;QAD3B,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAmB;IAC3C,CAAC;IAEJ,KAAK,CAAC,cAAc;QAClB,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;QACpE,MAAM,MAAM,GAAG,MAAM,YAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,EAAE,CAAA;SACV;QACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAA;QAClE,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,GAAG,mBAAmB,4BAA4B,CAAC,CAAA;SACpE;QACD,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,QAAkB;QAC9B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAA;QAC/C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,6BAAa,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;YAC/D,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAA;SACvB;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YACrC,IAAI,gCAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,sBAAsB,OAAO,EAAE,CAAC,CAAA;aACjD;YACD,OAAO,qBAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;QACF,OAAO,gBAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC;CACF;AAhCD,gCAgCC","sourcesContent":["import _, { Dictionary } from 'lodash'\nimport fs from 'mz/fs'\nimport path from 'path'\nimport stringArgv from 'string-argv'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { IUserCodeImporter } from './index'\n\nexport default class ProfileLoader {\n  constructor(\n    private readonly directory: string,\n    private readonly importer: IUserCodeImporter\n  ) {}\n\n  async getDefinitions(): Promise<Dictionary<string>> {\n    const definitionsFilePath = path.join(this.directory, 'cucumber.js')\n    const exists = await fs.exists(definitionsFilePath)\n    if (!exists) {\n      return {}\n    }\n    const definitions = await this.importer(definitionsFilePath, true)\n    if (typeof definitions !== 'object') {\n      throw new Error(`${definitionsFilePath} does not export an object`)\n    }\n    return definitions\n  }\n\n  async getArgv(profiles: string[]): Promise<string[]> {\n    const definitions = await this.getDefinitions()\n    if (profiles.length === 0 && doesHaveValue(definitions.default)) {\n      profiles = ['default']\n    }\n    const argvs = profiles.map((profile) => {\n      if (doesNotHaveValue(definitions[profile])) {\n        throw new Error(`Undefined profile: ${profile}`)\n      }\n      return stringArgv(definitions[profile])\n    })\n    return _.flatten(argvs)\n  }\n}\n"]}