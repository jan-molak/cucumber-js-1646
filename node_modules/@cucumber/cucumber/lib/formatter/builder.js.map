{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/formatter/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import getColorFns from './get_color_fns'\nimport JavascriptSnippetSyntax from './step_definition_snippet_builder/javascript_snippet_syntax'\nimport JsonFormatter from './json_formatter'\nimport MessageFormatter from './message_formatter'\nimport path from 'path'\nimport ProgressBarFormatter from './progress_bar_formatter'\nimport ProgressFormatter from './progress_formatter'\nimport RerunFormatter from './rerun_formatter'\nimport SnippetsFormatter from './snippets_formatter'\nimport StepDefinitionSnippetBuilder from './step_definition_snippet_builder'\nimport SummaryFormatter from './summary_formatter'\nimport UsageFormatter from './usage_formatter'\nimport UsageJsonFormatter from './usage_json_formatter'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport Formatter, { IFormatterCleanupFn, IFormatterLogFn } from '.'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { EventEmitter } from 'events'\nimport EventDataCollector from './helpers/event_data_collector'\nimport { Writable as WritableStream } from 'stream'\nimport { IParsedArgvFormatOptions } from '../cli/argv_parser'\nimport { SnippetInterface } from './step_definition_snippet_builder/snippet_syntax'\nimport HtmlFormatter from './html_formatter'\nimport { IUserCodeImporter } from '../cli'\n\ninterface IGetStepDefinitionSnippetBuilderOptions {\n  cwd: string\n  importer: IUserCodeImporter\n  snippetInterface?: SnippetInterface\n  snippetSyntax?: string\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IBuildOptions {\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  log: IFormatterLogFn\n  parsedArgvOptions: IParsedArgvFormatOptions\n  importer: IUserCodeImporter\n  stream: WritableStream\n  cleanup: IFormatterCleanupFn\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nconst FormatterBuilder = {\n  async build(type: string, options: IBuildOptions): Promise<Formatter> {\n    const FormatterConstructor = await FormatterBuilder.getConstructorByType(\n      type,\n      options.cwd,\n      options.importer\n    )\n    const colorFns = getColorFns(options.parsedArgvOptions.colorsEnabled)\n    const snippetBuilder = await FormatterBuilder.getStepDefinitionSnippetBuilder(\n      {\n        cwd: options.cwd,\n        importer: options.importer,\n        snippetInterface: options.parsedArgvOptions.snippetInterface,\n        snippetSyntax: options.parsedArgvOptions.snippetSyntax,\n        supportCodeLibrary: options.supportCodeLibrary,\n      }\n    )\n    return new FormatterConstructor({\n      colorFns,\n      snippetBuilder,\n      ...options,\n    })\n  },\n\n  async getConstructorByType(\n    type: string,\n    cwd: string,\n    importer: IUserCodeImporter\n  ): Promise<typeof Formatter> {\n    switch (type) {\n      case 'json':\n        return JsonFormatter\n      case 'message':\n        return MessageFormatter\n      case 'html':\n        return HtmlFormatter\n      case 'progress':\n        return ProgressFormatter\n      case 'progress-bar':\n        return ProgressBarFormatter\n      case 'rerun':\n        return RerunFormatter\n      case 'snippets':\n        return SnippetsFormatter\n      case 'summary':\n        return SummaryFormatter\n      case 'usage':\n        return UsageFormatter\n      case 'usage-json':\n        return UsageJsonFormatter\n      default:\n        return await FormatterBuilder.loadCustomFormatter(type, cwd, importer)\n    }\n  },\n\n  async getStepDefinitionSnippetBuilder({\n    cwd,\n    importer,\n    snippetInterface,\n    snippetSyntax,\n    supportCodeLibrary,\n  }: IGetStepDefinitionSnippetBuilderOptions) {\n    if (doesNotHaveValue(snippetInterface)) {\n      snippetInterface = SnippetInterface.Synchronous\n    }\n    let Syntax = JavascriptSnippetSyntax\n    if (doesHaveValue(snippetSyntax)) {\n      const fullSyntaxPath = path.resolve(cwd, snippetSyntax)\n      Syntax = await importer(fullSyntaxPath, true)\n      Syntax = FormatterBuilder.resolveConstructor(Syntax)\n    }\n    return new StepDefinitionSnippetBuilder({\n      snippetSyntax: new Syntax(snippetInterface),\n      parameterTypeRegistry: supportCodeLibrary.parameterTypeRegistry,\n    })\n  },\n\n  async loadCustomFormatter(\n    customFormatterPath: string,\n    cwd: string,\n    importer: IUserCodeImporter\n  ) {\n    let CustomFormatter = customFormatterPath.startsWith(`.`)\n      ? await importer(path.resolve(cwd, customFormatterPath), true)\n      : await importer(customFormatterPath)\n    CustomFormatter = FormatterBuilder.resolveConstructor(CustomFormatter)\n    if (doesHaveValue(CustomFormatter)) {\n      return CustomFormatter\n    } else {\n      throw new Error(\n        `Custom formatter (${customFormatterPath}) does not export a function`\n      )\n    }\n  },\n\n  resolveConstructor(ImportedCode: any) {\n    if (typeof ImportedCode === 'function') {\n      return ImportedCode\n    } else if (\n      doesHaveValue(ImportedCode) &&\n      typeof ImportedCode.default === 'function'\n    ) {\n      return ImportedCode.default\n    }\n    return null\n  },\n}\n\nexport default FormatterBuilder\n"]}